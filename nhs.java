//Project location is defined here
package NHS;

//ALL NEEDED IMPORTS
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

//Class extends JFrame
public class nhs extends javax.swing.JFrame {

    /*
    -- HCI ISSUES --
    My applications layout has  many key areas that i made sure to spend extra time and thought because i reviewed up about the gestalt 
    theory - principles which explains that users would prefer viewing big, simple and clear elements.
    Within the design aspect i was lacking in colours but preferred a more professional look and feel to the application.
    

    -- SECURITY SECTION --
    When looking at the security techniques implemented within the application. 
    I can list multiple strong implementation;
    * An user system was created to allow use of the application when registered.
    * Once logged in and a session is started with the user. The time date and username will be logged
      into a text file to keep track on who is accessing the system at any time.
    * When a search term is completed for relevant data. this will also trigger
      the data to be logged with the query, name, date and time
    
     */


    //Initilize objects and arrays that will be used within the runtime
    public static loginElements lE;
    public static ArrayList<loginElements> userArray = new ArrayList<loginElements>();
    public static ArrayList<String> actLogArray = new ArrayList<String>();
    public static String activeUser;

    public TableRowSorter<TableModel> rowSorter;
    public static final String PATH = "users.txt";

    public static int maxValue = 0, minValue = 0;

    /**
     * Creates new form softwareGrpProj
     */
    public nhs() {
        initComponents();

        //imporing CSV file for data table
        CSVFile DataSet = new CSVFile();
        MyModel NewModel = new MyModel();
        this.dataTable.setModel(NewModel);
        //Defining file location
        File DataFile = new File("1819_gp-exp-gms-pms-eng-1314-tabl.csv");
        //Creating data and filling up the table rows
        ArrayList<String[]> RowSorter2 = DataSet.ReadCSVfile(DataFile);
        NewModel.AddCSVData(RowSorter2);

        rowSorter = new TableRowSorter<>(dataTable.getModel());
        dataTable.setRowSorter(rowSorter);

        //executing the calculations and constructors on application start
        getMaxMin();
        getMode();
        getRange();
        loadGraph();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainBtn1 = new javax.swing.JButton();
        mainBtn3 = new javax.swing.JButton();
        mainBtn2 = new javax.swing.JButton();
        searchText = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        dataTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        activeUserTxt = new javax.swing.JTextField();
        graphPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GP Graph Tool");
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(0, 0, 0));
        setForeground(java.awt.Color.black);
        setResizable(false);

        mainBtn1.setText("Search");
        mainBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainBtn1ActionPerformed(evt);
            }
        });

        mainBtn3.setText("Logout");
        mainBtn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainBtn3ActionPerformed(evt);
            }
        });

        mainBtn2.setText("View Activity Log");
        mainBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainBtn2ActionPerformed(evt);
            }
        });

        dataTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(dataTable);

        console.setEditable(false);
        console.setColumns(20);
        console.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        console.setRows(5);
        jScrollPane2.setViewportView(console);

        activeUserTxt.setEditable(false);

        graphPanel.setBackground(new java.awt.Color(0, 0, 0));
        graphPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Graph", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14), new java.awt.Color(255, 255, 255))); // NOI18N

        javax.swing.GroupLayout graphPanelLayout = new javax.swing.GroupLayout(graphPanel);
        graphPanel.setLayout(graphPanelLayout);
        graphPanelLayout.setHorizontalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 328, Short.MAX_VALUE)
        );
        graphPanelLayout.setVerticalGroup(
            graphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(graphPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(activeUserTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mainBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                        .addComponent(mainBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(mainBtn3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(activeUserTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchText, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(mainBtn2, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                                    .addComponent(mainBtn3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(mainBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(graphPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainBtn1ActionPerformed
        //Creating variable to hold search term
        String searchTerm = searchText.getText();
        //Try-Catch statment with IOException used for file handling
        try {
            //Logging activity when searching
            setLogArray(1);
        } catch (IOException ex) {
            Logger.getLogger(nhs.class.getName()).log(Level.SEVERE, null, ex);
        }

        //Filtering data with the table depending on search term
        if (searchTerm.trim().length() == 0) {
            rowSorter.setRowFilter(null);
        } else {
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchTerm));
        }

        //Re-applying and executing contructors
        getMaxMin();
        getMode();
        getRange();
        loadGraph();
    }//GEN-LAST:event_mainBtn1ActionPerformed

    private void mainBtn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainBtn3ActionPerformed
        //Re-setting all data to blank and closing form to open up login form
        searchText.setText("");
        console.setText("");

        login lP = new login();
        lP.setVisible(true);
        super.setVisible(false);
    }//GEN-LAST:event_mainBtn3ActionPerformed

    private void mainBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainBtn2ActionPerformed
        //try catch for file handling
        try {
            String output = "Activity Log:\n\n";
            //Try-Catch statment with IOException used for file handling
            try {
                //Defining file location
                RandomAccessFile raf = new RandomAccessFile("actLog.txt", "r");
                String line;

                line = raf.readLine();
                while (line != null) {
                    output += line + "\n";
                    line = raf.readLine();
                }
            } catch (IOException ex) {
                Logger.getLogger(nhs.class.getName()).log(Level.SEVERE, null, ex);
            }
            //Displaying each line to the textarea within the JFrame
            console.setText(output);
            //Logging activity to text file
            setLogArray(2);
        } catch (IOException ex) {
            Logger.getLogger(nhs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mainBtn2ActionPerformed
    //Loading and filling up userArray with IOException for file handling
    private static void loadFile(String path) throws IOException {
        RandomAccessFile raf = new RandomAccessFile(path, "r");
        int i = 0;
        String line = raf.readLine();
        while (line != null) {
            //Splitting line into three data for each object varible availble within the loginEntry class
            String[] data = line.split(" ");
            loginElements lE = new loginElements();
            lE.setUser(data[0]);
            lE.setEmail(data[1]);
            lE.setPassword(data[2]);
            //Inserting to the array
            userArray.add(lE);
            line = raf.readLine();
            i++;
        }
    }

    public static String loadLog() throws IOException {
        //Setting contents of activity log into the text area
        String output = "";
        RandomAccessFile raf = new RandomAccessFile("actLog.txt", "r");
        String line = raf.readLine();
        while (line != null) {
            output += line;
            line = raf.readLine();
        }
        //return the data to be displayed
        return output;
    }

    //combining object values into string and inserting within the user text file
    private static void saveFile(String path) throws IOException {
        //Try-Catch statment with IOException used for file handling
        try {
            PrintWriter out = new PrintWriter(new FileWriter(path));
            for (int i = 0; i < userArray.size(); i++) {
                //Printing all object values availble
                out.println(userArray.get(i).getUser() + " " + userArray.get(i).getEmail() + " " + userArray.get(i).getPassword());
            }
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    //Getter for the user array
    public static ArrayList<loginElements> getArray() {
        return userArray;
    }

    //Setting array of users to then be saved into a text file
    public static void setArray(ArrayList<loginElements> tmpArray) throws IOException {
        userArray = tmpArray;
        saveFile(PATH);
    }

    //
    public static ArrayList<String> getLogArray() throws FileNotFoundException, IOException {
        RandomAccessFile raf = new RandomAccessFile("actLog.txt", "r");
        String line = raf.readLine();
        while (line != null) {
            actLogArray.add(line);
            line = raf.readLine();
        }
        return actLogArray;
    }

    //Setting array and saving the contents to a file depending on the switch case statment within
    //Option 0 = Login request | Option 1 = Search action 
    public void setLogArray(int opt) throws IOException {
        switch (opt) {
            case 0:
                //try catch for file handling
                try {
                    getLogArray();

                    Date date = new Date();
                    actLogArray.add("[" + date.toString() + "] " + activeUser + " logged in.");
                    PrintWriter out = new PrintWriter(new FileWriter("actLog.txt"));
                    for (int i = 0; i < actLogArray.size(); i++) {
                        out.println(actLogArray.get(i));
                    }
                    out.close();
                    actLogArray.clear();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                break;
            case 1:
                //Try-Catch statment with IOException used for file handling
                try {
                    String searchTerm = searchText.getText();
                    getLogArray();

                    Date date = new Date();
                    actLogArray.add("[" + date.toString() + "] Username: " + activeUser + " | Searched query: " + searchTerm);
                    PrintWriter out = new PrintWriter(new FileWriter("actLog.txt"));
                    for (int i = 0; i < actLogArray.size(); i++) {
                        out.println(actLogArray.get(i));
                    }
                    out.close();
                    actLogArray.clear();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                break;
        }
    }

    //Loading Graphics for JPanel
    public void loadGraph() {
        graphics g = new graphics(3.1);
    }

    //Creating class to handle the table model and all constructirs that can be used to gain information within the data sheet 
    public class MyModel extends AbstractTableModel {

        private final String[] columnNames;
        private ArrayList<String[]> Data = new ArrayList<String[]>();

        MyModel() {
            //Setting all column names
            this.columnNames = new String[]{"Practice Size", "Contract", "Dispensing / Non-Dispensing", "Total expenses / list size", "Total expenses / list size", "Office & general business / list size", "Premises / list size", "Employee / list size", "Car & travel / list size", "Interest / list size", "Other / list size", "Net capital allowance / list size", "Count of practices in group", "Count of matched practices", "% Match rate"};
        }

        public void AddCSVData(ArrayList<String[]> DataIn) {
            this.Data = DataIn;
            this.fireTableDataChanged();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public int getRowCount() {
            return Data.size();
        }

        @Override
        public String getColumnName(int col) {
            return columnNames[col];
        }

        @Override
        public Object getValueAt(int row, int col) {
            return Data.get(row)[col];
        }

    }
    
    //Calculating the min and max and assigning the to variables
    public void getMaxMin() {
        //
        ArrayList<Integer> ListNumbers = new ArrayList<Integer>();

        for (int Number = 0; Number < dataTable.getRowCount(); Number++) {
            ListNumbers.add(Integer.parseInt(dataTable.getValueAt(Number, 13).toString()));
        }

        int max = Collections.max(ListNumbers);
        int min = Collections.min(ListNumbers);

        console.setText("Min value: " + min + "  |  Max value: " + max + "\n");
        maxValue = max;
        minValue = min;
    }

    //Calculating Mode and return value
    public int getMode() {
        int MaxCount = 0;
        int ModeValue1 = 0;
        int one[] = new int[dataTable.getRowCount()];
        ArrayList<Integer> list = new ArrayList<Integer>();
        for (int two = 0;
                two < dataTable.getRowCount();
                two++) {
            one[two] = (Integer.parseInt(dataTable.getValueAt(two, 13).toString()));

            int count = 0;
            for (int three = 0;
                    three < dataTable.getRowCount();
                    three++) {
                if (one[three] == one[two]) {
                    count++;
                }

            }
            if (count > MaxCount) {
                MaxCount = count;
                ModeValue1 = one[two];
            }

        }
        console.append("Mode value: " + ModeValue1);
        return ModeValue1;
    }

    //Calculating Range and return value
    public void getRange() {

        int RangeValue = maxValue - minValue;

        console.append("\nRange value: " + RangeValue + "\n\n");
    }
    
    public class CSVFile {

        //Creating array and splitting the rows within to display each in the correct order
        private final ArrayList<String[]> AL = new ArrayList<>();
        private String[] RowOne;

        public ArrayList<String[]> ReadCSVfile(File DataFile) {

            try {
                BufferedReader BufferedR = new BufferedReader(new FileReader(DataFile));
                while (BufferedR.ready()) {
                    String MyString = BufferedR.readLine();
                    //Each value is split by a comma 
                    RowOne = MyString.split(",");
                    AL.add(RowOne);
                }

            } catch (Exception error) {
                String ErrorMessage = error.getMessage();
                System.out.println("File not found: " + ErrorMessage);

            }
            return AL;

        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(nhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(nhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(nhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(nhs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //Try-Catch statment with IOException used for file handling
                try {
                    loadFile(PATH);
                } catch (IOException ex) {
                    Logger.getLogger(nhs.class.getName()).log(Level.SEVERE, null, ex);
                }
                new login().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField activeUserTxt;
    private javax.swing.JTextArea console;
    private javax.swing.JTable dataTable;
    private javax.swing.JPanel graphPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton mainBtn1;
    private javax.swing.JButton mainBtn2;
    private javax.swing.JButton mainBtn3;
    private javax.swing.JTextField searchText;
    // End of variables declaration//GEN-END:variables
}
